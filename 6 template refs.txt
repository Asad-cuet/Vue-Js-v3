<template>
<div>

  <input type="text" ref="inputRef" />

</div>
</template>
<script>

 export default
 {
    name:'refs',
    data()
    {
           return
           {


           }
               
            
      
    },
    mounted()
    {
      this.$refs.inputRef.focus()
    }
  


}

</script>


**** **** **** **** **** ***


Ref on Component#


ref can also be used on a child component. In this case the reference will be that of a component instance:


<template>
  <Child ref="child" />
</template>

<script>
import Child from './Child.vue'

export default {
  components: {
    Child
  },
  mounted() {
     this.$refs.child     // will hold an instance of <Child />
  }
}
</script>



The referenced instance will be identical to the child component's this, which means the parent component will
have full access to every property and method of the child component. This makes it easy to create tightly 
coupled implementation details between the parent and the child, so component refs should be only used when 
absolutely needed - in most cases, you should try to implement parent / child interactions using the standard 
props and emit interfaces first.

******* ******* ***** *******

The expose option can be used to limit the access to a child instance:

export default {
  expose: ['publicData', 'publicMethod'],
  data() {
    return {
      publicData: 'foo',
      privateData: 'bar'
    }
  },
  methods: {
    publicMethod() {
      /* ... */
    },
    privateMethod() {
      /* ... */
    }
  }
}
In the above example, a parent referencing this component via template ref will 
only be able to access publicData and publicMethod.

